{"remainingRequest":"/Users/ykova/mine/coding-kitchen/node_modules/ts-loader/index.js??ref--16-1!/Users/ykova/mine/coding-kitchen/packages/web/src/components/Comments.tsx","dependencies":[{"path":"/Users/ykova/mine/coding-kitchen/packages/web/src/components/Comments.tsx","mtime":1637786493694},{"path":"/Users/ykova/mine/coding-kitchen/node_modules/cache-loader/dist/cjs.js","mtime":1637425226491},{"path":"/Users/ykova/mine/coding-kitchen/node_modules/ts-loader/index.js","mtime":1637425227303}],"contextDependencies":[],"result":["var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n    return cooked;\n};\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useMutation } from '@apollo/client';\nimport styled from '@emotion/styled';\nimport { Grid, TextField } from '@mui/material';\nimport IconButton from '@mui/material/IconButton';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport SendIcon from '@mui/icons-material/Send';\nimport { useState } from 'react';\nimport { SEND_COMMENT } from '../graphql/mutations/post';\nvar CommentsContainer = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-between;\\n  padding: 16px;\\n  height: calc(100vh - 72px);\\n  .Comments__list {\\n    height: 100%;\\n    width: 100%;\\n    overflow-y: scroll;\\n    margin-bottom: 16px;\\n  }\\n\"], [\"\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-between;\\n  padding: 16px;\\n  height: calc(100vh - 72px);\\n  .Comments__list {\\n    height: 100%;\\n    width: 100%;\\n    overflow-y: scroll;\\n    margin-bottom: 16px;\\n  }\\n\"])));\nexport function Comments(_a) {\n    var _this = this;\n    var comments = _a.comments, postId = _a.postId, onComment = _a.onComment;\n    var _b = useState(''), commentText = _b[0], setCommentText = _b[1];\n    var sendComment = useMutation(SEND_COMMENT)[0];\n    return (_jsx(Grid, { children: _jsx(Grid, __assign({ item: true, xs: 12 }, { children: _jsxs(CommentsContainer, { children: [_jsx(List, __assign({ className: \"Comments__list\", sx: { width: '100%', bgcolor: 'background.paper' } }, { children: comments.map(function (comment) {\n                            return (_jsxs(ListItem, __assign({ alignItems: \"flex-start\" }, { children: [_jsx(ListItemAvatar, { children: _jsx(Avatar, { alt: comment.author.name, src: \"/static/images/avatar/1.jpg\" }, void 0) }, void 0), _jsx(ListItemText, { primary: comment.author.name, secondary: _jsx(_Fragment, { children: _jsx(Typography, __assign({ sx: { display: 'inline' }, component: \"span\", variant: \"body2\", color: \"text.primary\" }, { children: comment.comment }), void 0) }, void 0) }, void 0)] }), comment.id));\n                        }) }), void 0), _jsx(\"div\", __assign({ className: \"Comments__input\" }, { children: _jsxs(Grid, __assign({ container: true, direction: \"row\" }, { children: [_jsx(Grid, __assign({ xs: 10 }, { children: _jsx(TextField, { id: \"outlined-textarea\", label: \"Multiline Placeholder\", fullWidth: true, rows: 3, value: commentText, onChange: function (event) {\n                                            setCommentText(event.target.value);\n                                        }, placeholder: \"Placeholder\", multiline: true }, void 0) }), void 0), _jsx(Grid, __assign({ xs: 2 }, { children: _jsx(IconButton, __assign({ \"aria-label\": \"delete\", onClick: function () { return __awaiter(_this, void 0, void 0, function () {\n                                            return __generator(this, function (_a) {\n                                                switch (_a.label) {\n                                                    case 0: return [4, sendComment({\n                                                            variables: {\n                                                                postId: postId,\n                                                                text: commentText\n                                                            }\n                                                        })];\n                                                    case 1:\n                                                        _a.sent();\n                                                        onComment();\n                                                        setCommentText('');\n                                                        return [2];\n                                                }\n                                            });\n                                        }); } }, { children: _jsx(SendIcon, {}, void 0) }), void 0) }), void 0)] }), void 0) }), void 0)] }, void 0) }), void 0) }, void 0));\n}\nvar templateObject_1;\n",{"version":3,"file":"/Users/ykova/mine/coding-kitchen/packages/web/src/components/Comments.tsx","sourceRoot":"","sources":["/Users/ykova/mine/coding-kitchen/packages/web/src/components/Comments.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useMutation } from '@apollo/client';\nimport styled from '@emotion/styled';\nimport { Grid, TextField } from '@mui/material';\nimport IconButton from '@mui/material/IconButton';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport SendIcon from '@mui/icons-material/Send';\nimport { useState } from 'react';\nimport { SEND_COMMENT } from '../graphql/mutations/post';\n\nconst CommentsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 16px;\n  height: calc(100vh - 72px);\n  .Comments__list {\n    height: 100%;\n    width: 100%;\n    overflow-y: scroll;\n    margin-bottom: 16px;\n  }\n`;\n\nexport function Comments({ comments, postId, onComment }) {\n  const [commentText, setCommentText] = useState('');\n  const [sendComment] = useMutation(SEND_COMMENT);\n  return (\n    <Grid>\n      <Grid item xs={12}>\n        <CommentsContainer>\n          <List className=\"Comments__list\" sx={{ width: '100%', bgcolor: 'background.paper' }}>\n            {comments.map(comment => {\n              return (\n                <ListItem alignItems=\"flex-start\" key={comment.id}>\n                  <ListItemAvatar>\n                    <Avatar alt={comment.author.name} src=\"/static/images/avatar/1.jpg\" />\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={comment.author.name}\n                    secondary={\n                      <>\n                        <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\">\n                          {comment.comment}\n                        </Typography>\n                      </>\n                    }\n                  />\n                </ListItem>\n              );\n            })}\n          </List>\n          <div className=\"Comments__input\">\n            <Grid container direction=\"row\">\n              <Grid xs={10}>\n                <TextField\n                  id=\"outlined-textarea\"\n                  label=\"Multiline Placeholder\"\n                  fullWidth\n                  rows={3}\n                  value={commentText}\n                  onChange={event => {\n                    setCommentText(event.target.value);\n                  }}\n                  placeholder=\"Placeholder\"\n                  multiline\n                />\n              </Grid>\n              <Grid xs={2}>\n                <IconButton\n                  aria-label=\"delete\"\n                  onClick={async () => {\n                    await sendComment({\n                      variables: {\n                        postId,\n                        text: commentText\n                      }\n                    });\n                    onComment();\n                    setCommentText('');\n                  }}\n                >\n                  <SendIcon />\n                </IconButton>\n              </Grid>\n            </Grid>\n          </div>\n        </CommentsContainer>\n      </Grid>\n    </Grid>\n  );\n}\n"]}]}