{"remainingRequest":"/Users/ykova/mine/coding-kitchen/node_modules/ts-loader/index.js??ref--16-1!/Users/ykova/mine/coding-kitchen/packages/web/src/index.tsx","dependencies":[{"path":"/Users/ykova/mine/coding-kitchen/packages/web/src/index.tsx","mtime":1637828661174},{"path":"/Users/ykova/mine/coding-kitchen/node_modules/cache-loader/dist/cjs.js","mtime":1637425226491},{"path":"/Users/ykova/mine/coding-kitchen/node_modules/ts-loader/index.js","mtime":1637425227303}],"contextDependencies":[],"result":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { ApolloClient, ApolloLink, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error';\nimport * as React from 'react';\nimport { render } from 'react-dom';\nimport { createUploadLink } from 'apollo-upload-client';\nimport Cookies from 'js-cookie';\nimport App from './App';\nimport { typePolicies } from './localState/typePolicies';\nvar GRAPHQL_API_URL = 'http://localhost:8080/graphql';\nvar httpLink = createUploadLink({\n    uri: GRAPHQL_API_URL\n});\nvar authLink = setContext(function (_, _a) {\n    var headers = _a.headers;\n    var token = Cookies.get('token');\n    return {\n        headers: __assign(__assign({}, headers), { authorization: token ? token : '' })\n    };\n});\nvar errorLink = onError(function (_a) {\n    var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError;\n    if (graphQLErrors) {\n        graphQLErrors.forEach(function (_a) {\n            var extensions = _a.extensions, message = _a.message, locations = _a.locations, path = _a.path;\n            if ((extensions === null || extensions === void 0 ? void 0 : extensions.code) === 'UNAUTHENTICATED') {\n                window.location.href = '/login';\n                return;\n            }\n            console.error(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n        });\n    }\n    if (networkError) {\n        console.error(\"[Network error]: \".concat(networkError));\n    }\n});\nvar client = new ApolloClient({\n    link: ApolloLink.from([errorLink, authLink, httpLink]),\n    cache: new InMemoryCache({\n        typePolicies: typePolicies\n    })\n});\nrender(_jsx(ApolloProvider, __assign({ client: client }, { children: _jsx(App, {}, void 0) }), void 0), document.getElementById('root'));\n",{"version":3,"file":"/Users/ykova/mine/coding-kitchen/packages/web/src/index.tsx","sourceRoot":"","sources":["/Users/ykova/mine/coding-kitchen/packages/web/src/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,cAAc,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AACzF,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AACjD,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAC5C,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AACnC,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AACxD,OAAO,OAAO,MAAM,WAAW,CAAC;AAEhC,OAAO,GAAG,MAAM,OAAO,CAAC;AACxB,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AAEzD,IAAM,eAAe,GAAG,+BAA+B,CAAC;AAExD,IAAM,QAAQ,GAAG,gBAAgB,CAAC;IAChC,GAAG,EAAE,eAAe;CACrB,CAAC,CAAC;AAEH,IAAM,QAAQ,GAAG,UAAU,CAAC,UAAC,CAAC,EAAE,EAAW;QAAT,OAAO,aAAA;IACvC,IAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACnC,OAAO;QACL,OAAO,wBACF,OAAO,KACV,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAClC;KACF,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,IAAM,SAAS,GAAG,OAAO,CAAC,UAAC,EAA6B;QAA5B,aAAa,mBAAA,EAAE,YAAY,kBAAA;IACnD,IAAI,aAAa,EAAE;QACf,aAAa,CAAC,OAAO,CAAC,UAAC,EAAsC;gBAArC,UAAU,gBAAA,EAAE,OAAO,aAAA,EAAE,SAAS,eAAA,EAAE,IAAI,UAAA;YAExD,IAAI,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI,MAAK,iBAAiB,EAAE;gBACxC,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC;gBAChC,OAAO;aACV;YAED,OAAO,CAAC,KAAK,CAAC,oCAA6B,OAAO,yBAAe,SAAS,qBAAW,IAAI,CAAE,CAAC,CAAC;QACjG,CAAC,CAAC,CAAC;KACN;IAED,IAAI,YAAY,EAAE;QACd,OAAO,CAAC,KAAK,CAAC,2BAAoB,YAAY,CAAE,CAAC,CAAC;KACrD;AACL,CAAC,CAAC,CAAC;AAEH,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC;IAC5B,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,SAAgB,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC7D,KAAK,EAAE,IAAI,aAAa,CAAC;QACrB,YAAY,cAAA;KACf,CAAC;CACL,CAAC,CAAC;AAEH,MAAM,CACJ,KAAC,cAAc,aAAC,MAAM,EAAE,MAAM,gBAC5B,KAAC,GAAG,aAAG,YACQ,EACjB,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAChC,CAAC","sourcesContent":["import { ApolloClient, ApolloLink, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error';\nimport * as React from 'react';\nimport { render } from 'react-dom';\nimport { createUploadLink } from 'apollo-upload-client';\nimport Cookies from 'js-cookie';\n\nimport App from './App';\nimport { typePolicies } from './localState/typePolicies';\n\nconst GRAPHQL_API_URL = 'http://localhost:8080/graphql';\n\nconst httpLink = createUploadLink({\n  uri: GRAPHQL_API_URL\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = Cookies.get('token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? token : ''\n    }\n  };\n});\n\nconst errorLink = onError(({graphQLErrors, networkError}) => {\n    if (graphQLErrors) {\n        graphQLErrors.forEach(({extensions, message, locations, path}) => {\n            // tslint:disable-next-line:prettier\n            if (extensions?.code === 'UNAUTHENTICATED') {\n                window.location.href = '/login';\n                return;\n            }\n\n            console.error(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`);\n        });\n    }\n\n    if (networkError) {\n        console.error(`[Network error]: ${networkError}`);\n    }\n});\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([errorLink as any, authLink, httpLink]),\n    cache: new InMemoryCache({\n        typePolicies\n    })\n});\n\nrender(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"]}]}