{"remainingRequest":"/Users/ykova/mine/coding-kitchen/node_modules/ts-loader/index.js??ref--16-1!/Users/ykova/mine/coding-kitchen/packages/web/src/components/PostDialog.tsx","dependencies":[{"path":"/Users/ykova/mine/coding-kitchen/packages/web/src/components/PostDialog.tsx","mtime":1637828881267},{"path":"/Users/ykova/mine/coding-kitchen/node_modules/cache-loader/dist/cjs.js","mtime":1637425226491},{"path":"/Users/ykova/mine/coding-kitchen/node_modules/ts-loader/index.js","mtime":1637425227303}],"contextDependencies":[],"result":["var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n    return cooked;\n};\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useQuery } from '@apollo/client';\nimport styled from '@emotion/styled';\nimport CloseIcon from '@mui/icons-material/Close';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport { Grid } from '@mui/material';\nimport AppBar from '@mui/material/AppBar';\nimport Dialog from '@mui/material/Dialog';\nimport IconButton from '@mui/material/IconButton';\nimport Slide from '@mui/material/Slide';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport * as React from 'react';\nimport { GET_POST } from '../graphql/queries/postQuery';\nimport { Comments } from './Comments';\nvar PostImage = styled.img(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\"], [\"\"])));\nvar Transition = React.forwardRef(function Transition(props, ref) {\n    return _jsx(Slide, __assign({ direction: \"up\", ref: ref }, props), void 0);\n});\nexport function PostDialog(_a) {\n    var post = _a.post;\n    var _b = React.useState(false), open = _b[0], setOpen = _b[1];\n    var _c = useQuery(GET_POST, {\n        variables: {\n            postId: post.id\n        }\n    }), data = _c.data, loading = _c.loading, refetch = _c.refetch;\n    var handleClickOpen = function () {\n        setOpen(true);\n    };\n    var handleClose = function () {\n        setOpen(false);\n    };\n    return (_jsxs(_Fragment, { children: [_jsx(IconButton, __assign({ \"aria-label\": \"settings\", onClick: handleClickOpen }, { children: _jsx(MoreVertIcon, {}, void 0) }), void 0), _jsxs(Dialog, __assign({ fullScreen: true, open: open, onClose: handleClose, TransitionComponent: Transition }, { children: [_jsx(AppBar, __assign({ sx: { position: 'relative' } }, { children: _jsxs(Toolbar, { children: [_jsx(IconButton, __assign({ edge: \"start\", color: \"inherit\", onClick: handleClose, \"aria-label\": \"close\" }, { children: _jsx(CloseIcon, {}, void 0) }), void 0), _jsx(Typography, __assign({ sx: { ml: 2, flex: 1 }, variant: \"h6\", component: \"div\" }, { children: \"Post\" }), void 0)] }, void 0) }), void 0), _jsxs(Grid, __assign({ container: true }, { children: [_jsx(Grid, __assign({ item: true, xs: 8 }, { children: _jsx(PostImage, { src: post.imageUrl }, void 0) }), void 0), _jsx(Grid, __assign({ item: true, xs: 4 }, { children: !loading && data.post && (_jsx(Comments, { comments: data.post.lazyComments, postId: post.id, onComment: function () {\n                                        refetch();\n                                    } }, void 0)) }), void 0)] }), void 0)] }), void 0)] }, void 0));\n}\nvar templateObject_1;\n",{"version":3,"file":"/Users/ykova/mine/coding-kitchen/packages/web/src/components/PostDialog.tsx","sourceRoot":"","sources":["/Users/ykova/mine/coding-kitchen/packages/web/src/components/PostDialog.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useQuery } from '@apollo/client';\nimport styled from '@emotion/styled';\nimport CloseIcon from '@mui/icons-material/Close';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport { Grid } from '@mui/material';\nimport AppBar from '@mui/material/AppBar';\nimport Dialog from '@mui/material/Dialog';\nimport IconButton from '@mui/material/IconButton';\nimport Slide from '@mui/material/Slide';\nimport Toolbar from '@mui/material/Toolbar';\nimport { TransitionProps } from '@mui/material/transitions';\nimport Typography from '@mui/material/Typography';\nimport * as React from 'react';\nimport { GET_POST } from '../graphql/queries/postQuery';\nimport { Comments } from './Comments';\n\nconst PostImage = styled.img``;\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & {\n    children: React.ReactElement;\n  },\n  ref: React.Ref<unknown>\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\ninterface PostDialogProps {\n  post: any;\n}\n\nexport function PostDialog({ post }: PostDialogProps) {\n  const [open, setOpen] = React.useState(false);\n  const { data, loading, refetch } = useQuery(GET_POST, {\n    variables: {\n      postId: post.id\n    }\n  });\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <IconButton aria-label=\"settings\" onClick={handleClickOpen}>\n        <MoreVertIcon />\n      </IconButton>\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\n        <AppBar sx={{ position: 'relative' }}>\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n              <CloseIcon />\n            </IconButton>\n            <Typography sx={{ ml: 2, flex: 1 }} variant=\"h6\" component=\"div\">\n              Post\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid container>\n          <Grid item xs={8}>\n            <PostImage src={post.imageUrl} />\n          </Grid>\n          <Grid item xs={4}>\n            {!loading && data.post && (\n              <Comments\n                comments={data.post.lazyComments}\n                postId={post.id}\n                onComment={() => {\n                  refetch();\n                }}\n              />\n            )}\n          </Grid>\n        </Grid>\n      </Dialog>\n    </>\n  );\n}\n"]}]}