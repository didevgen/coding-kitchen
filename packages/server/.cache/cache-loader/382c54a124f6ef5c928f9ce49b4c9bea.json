{"remainingRequest":"/Users/ykova/mine/coding-kitchen/node_modules/ts-loader/index.js??ref--16-1!/Users/ykova/mine/coding-kitchen/packages/server/src/services/post.service.ts","dependencies":[{"path":"/Users/ykova/mine/coding-kitchen/packages/server/src/services/post.service.ts","mtime":1637789468451},{"path":"/Users/ykova/mine/coding-kitchen/node_modules/cache-loader/dist/cjs.js","mtime":1637425226491},{"path":"/Users/ykova/mine/coding-kitchen/node_modules/ts-loader/index.js","mtime":1637425227303}],"contextDependencies":[],"result":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport mongoose from 'mongoose';\nimport { S3ImageUploader } from '../aws/s3ImageUploader';\nimport { CommentModel } from '../db/comment';\nimport { PostModel } from '../db/post';\nimport { PhotosService } from './photos';\nvar PostService = (function () {\n    function PostService() {\n    }\n    PostService.prototype.findPost = function (id) {\n        return __awaiter(this, void 0, Promise, function () {\n            return __generator(this, function (_a) {\n                return [2, PostModel.findById(id)];\n            });\n        });\n    };\n    PostService.prototype.findPosts = function () {\n        return __awaiter(this, void 0, Promise, function () {\n            return __generator(this, function (_a) {\n                return [2, PostModel.find({})];\n            });\n        });\n    };\n    PostService.prototype.createPost = function (postData, image, user) {\n        return __awaiter(this, void 0, Promise, function () {\n            var imageUrl, post, e_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 3, , 4]);\n                        return [4, new PhotosService(new S3ImageUploader(user)).addImage(image)];\n                    case 1:\n                        imageUrl = _a.sent();\n                        post = __assign(__assign({}, postData), { author: user, imageUrl: imageUrl });\n                        return [4, PostModel.create(post)];\n                    case 2: return [2, _a.sent()];\n                    case 3:\n                        e_1 = _a.sent();\n                        console.log(e_1);\n                        return [2, null];\n                    case 4: return [2];\n                }\n            });\n        });\n    };\n    PostService.prototype.commentPost = function (postId, comment, author) {\n        return __awaiter(this, void 0, Promise, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, CommentModel.create({\n                            comment: comment,\n                            post: postId,\n                            author: author\n                        })];\n                    case 1:\n                        _a.sent();\n                        return [2];\n                }\n            });\n        });\n    };\n    PostService.prototype.getComments = function (postId) {\n        return __awaiter(this, void 0, Promise, function () {\n            return __generator(this, function (_a) {\n                return [2, CommentModel.find({ post: new mongoose.Types.ObjectId(postId) }).populate({\n                        path: 'author'\n                    })];\n            });\n        });\n    };\n    PostService.prototype.likePost = function (postId, userId, isLiked) {\n        return __awaiter(this, void 0, Promise, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!isLiked) return [3, 2];\n                        return [4, PostModel.findOneAndUpdate({ _id: new mongoose.Types.ObjectId(postId) }, { $push: { likes: userId } })];\n                    case 1:\n                        _a.sent();\n                        return [3, 4];\n                    case 2: return [4, PostModel.findOneAndUpdate({ _id: new mongoose.Types.ObjectId(postId) }, { $pull: { likes: userId } })];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [2];\n                }\n            });\n        });\n    };\n    PostService.prototype.isLiked = function (postId, userId) {\n        return __awaiter(this, void 0, Promise, function () {\n            var post;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, PostModel.findById(postId)\n                            .populate('likes')\n                            .exec()];\n                    case 1:\n                        post = _a.sent();\n                        return [2, !!post.likes.find(function (user) { return user.id === userId; })];\n                }\n            });\n        });\n    };\n    return PostService;\n}());\nexport { PostService };\nexport var postService = new PostService();\n",{"version":3,"file":"/Users/ykova/mine/coding-kitchen/packages/server/src/services/post.service.ts","sourceRoot":"","sources":["/Users/ykova/mine/coding-kitchen/packages/server/src/services/post.service.ts"],"names":[],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport { S3ImageUploader } from '../aws/s3ImageUploader';\nimport { CommentModel } from '../db/comment';\nimport { Post, PostModel } from '../db/post';\nimport { UploadedFile } from './imageService';\nimport { PhotosService } from './photos';\n\nexport interface PostInput {\n  description: string;\n}\n\ninterface BasePostOperations {\n  findPost(id: string): Promise<Post>;\n\n  findPosts(): Promise<Post[]>;\n\n  commentPost(postId: string, text: string, userId: string): Promise<void>;\n\n  getComments(postId): Promise<Comment[]>;\n\n  createPost(postData: PostInput, image: UploadedFile, user: string): Promise<Post | null>;\n}\n\nexport class PostService implements BasePostOperations {\n  public async findPost(id: string): Promise<Post> {\n    return PostModel.findById(id);\n  }\n\n  public async findPosts(): Promise<Post[]> {\n    return PostModel.find({});\n  }\n\n  public async createPost(postData: PostInput, image: UploadedFile, user: string): Promise<Post | null> {\n    try {\n      const imageUrl = await new PhotosService(new S3ImageUploader(user)).addImage(image);\n      const post = {\n        ...postData,\n        author: user,\n        imageUrl\n      };\n      return await PostModel.create(post);\n    } catch (e) {\n      console.log(e);\n      return null;\n    }\n  }\n\n  async commentPost(postId: string, comment: string, author: string): Promise<void> {\n    await CommentModel.create({\n      comment,\n      post: postId,\n      author\n    });\n  }\n\n  async getComments(postId: string): Promise<Comment[]> {\n    return CommentModel.find({ post: new mongoose.Types.ObjectId(postId) }).populate({\n      path: 'author'\n    });\n  }\n\n  async likePost(postId: string, userId: string, isLiked: boolean): Promise<void> {\n    if (isLiked) {\n      await PostModel.findOneAndUpdate({ _id: new mongoose.Types.ObjectId(postId) }, { $push: { likes: userId } });\n    } else {\n      await PostModel.findOneAndUpdate({ _id: new mongoose.Types.ObjectId(postId) }, { $pull: { likes: userId } });\n    }\n  }\n\n  async isLiked(postId: string, userId: string): Promise<boolean> {\n    const post = await PostModel.findById(postId)\n      .populate('likes')\n      .exec();\n    return !!post.likes.find(user => user.id === userId);\n  }\n}\n\nexport const postService = new PostService();\n"]}]}