{"remainingRequest":"/Users/ykova/mine/coding-kitchen/node_modules/ts-loader/index.js??ref--16-1!/Users/ykova/mine/coding-kitchen/packages/server/src/aws/s3ImageUploader.ts","dependencies":[{"path":"/Users/ykova/mine/coding-kitchen/packages/server/src/aws/s3ImageUploader.ts","mtime":1637612933349},{"path":"/Users/ykova/mine/coding-kitchen/node_modules/cache-loader/dist/cjs.js","mtime":1637425226491},{"path":"/Users/ykova/mine/coding-kitchen/node_modules/ts-loader/index.js","mtime":1637425227303}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport AWS from 'aws-sdk';\nimport fs from 'fs';\nvar s3 = new AWS.S3();\nvar S3ImageUploader = (function () {\n    function S3ImageUploader(prefix) {\n        this.prefix = prefix;\n    }\n    S3ImageUploader.prototype.upload = function (fileUrl, fileName, bucketRoot) {\n        if (bucketRoot === void 0) { bucketRoot = 'assets'; }\n        return __awaiter(this, void 0, Promise, function () {\n            var fileContent, Key, params, uploadPromise, sendData;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        fileContent = fs.readFileSync(fileUrl);\n                        Key = \"images/\" + this.prefix + \"/\" + fileName;\n                        params = {\n                            Bucket: process.env.AWS_S3_BUCKET,\n                            Key: bucketRoot + \"/\" + Key,\n                            Body: fileContent\n                        };\n                        uploadPromise = new Promise(function (resolve, reject) {\n                            s3.upload(params, function (err, data) {\n                                if (err) {\n                                    reject(err);\n                                    throw new Error(\"upload error \" + err.message);\n                                }\n                                else {\n                                    resolve(data);\n                                }\n                            });\n                        });\n                        return [4, uploadPromise];\n                    case 1:\n                        sendData = _a.sent();\n                        if (sendData.Location) {\n                            return [2, process.env.AWS_CLOUDFRONT_ASSET_URL + \"/\" + Key];\n                        }\n                        return [2];\n                }\n            });\n        });\n    };\n    S3ImageUploader.prototype.download = function (fileName, bucketRoot) {\n        if (bucketRoot === void 0) { bucketRoot = 'assets'; }\n        var Key = \"images/\" + this.prefix + \"/\" + fileName;\n        var options = {\n            Bucket: process.env.AWS_S3_BUCKET,\n            Key: bucketRoot + \"/\" + Key\n        };\n        return s3.getObject(options).createReadStream();\n    };\n    S3ImageUploader.prototype.remove = function (imageUuid, bucketRoot) {\n        if (bucketRoot === void 0) { bucketRoot = 'assets'; }\n        return __awaiter(this, void 0, Promise, function () {\n            var listParams, listedObjects, deleteParams;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        listParams = {\n                            Bucket: process.env.AWS_S3_BUCKET,\n                            Prefix: bucketRoot + \"/images/\" + this.prefix + \"/\" + imageUuid\n                        };\n                        return [4, s3.listObjectsV2(listParams).promise()];\n                    case 1:\n                        listedObjects = _a.sent();\n                        if (listedObjects.Contents.length === 0) {\n                            return [2];\n                        }\n                        deleteParams = {\n                            Bucket: process.env.AWS_S3_BUCKET,\n                            Delete: { Objects: [] }\n                        };\n                        listedObjects.Contents.forEach(function (_a) {\n                            var Key = _a.Key;\n                            deleteParams.Delete.Objects.push({ Key: Key });\n                        });\n                        return [4, s3.deleteObjects(deleteParams).promise()];\n                    case 2:\n                        _a.sent();\n                        if (!listedObjects.IsTruncated) return [3, 4];\n                        return [4, this.remove(imageUuid)];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [2];\n                }\n            });\n        });\n    };\n    return S3ImageUploader;\n}());\nexport { S3ImageUploader };\n",{"version":3,"file":"/Users/ykova/mine/coding-kitchen/packages/server/src/aws/s3ImageUploader.ts","sourceRoot":"","sources":["/Users/ykova/mine/coding-kitchen/packages/server/src/aws/s3ImageUploader.ts"],"names":[],"mappings":"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","sourcesContent":["import AWS from 'aws-sdk';\n// tslint:disable-next-line:no-submodule-imports\nimport { ManagedUpload } from 'aws-sdk/lib/s3/managed_upload';\nimport fs from 'fs';\nimport SendData = ManagedUpload.SendData;\nimport internal from 'stream';\n\nexport interface Uploadable {\n  upload(fileUrl: string, fileName: string, bucketRoot?: string): Promise<string>;\n  remove(imageUuid: string, bucketRoot?: string): Promise<void>;\n  download(fileName: string, bucketRoot?: string): internal.Readable;\n}\n\nconst s3 = new AWS.S3();\n\nexport class S3ImageUploader implements Uploadable {\n  constructor(private prefix: string) {}\n\n  public async upload(fileUrl: string, fileName: string, bucketRoot = 'assets'): Promise<string> {\n    const fileContent = fs.readFileSync(fileUrl);\n    const Key = `images/${this.prefix}/${fileName}`;\n    const params = {\n      Bucket: process.env.AWS_S3_BUCKET,\n      Key: `${bucketRoot}/${Key}`,\n      Body: fileContent\n    };\n\n    const uploadPromise = new Promise<SendData>((resolve, reject) => {\n      s3.upload(params, (err, data) => {\n        if (err) {\n          reject(err);\n          throw new Error(`upload error ${err.message}`);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n    const sendData: SendData = await uploadPromise;\n    if (sendData.Location) {\n      return `${process.env.AWS_CLOUDFRONT_ASSET_URL}/${Key}`;\n    }\n  }\n\n  public download(fileName: string, bucketRoot = 'assets') {\n    const Key = `images/${this.prefix}/${fileName}`;\n    const options = {\n      Bucket: process.env.AWS_S3_BUCKET,\n      Key: `${bucketRoot}/${Key}`\n    };\n\n    return s3.getObject(options).createReadStream();\n  }\n\n  public async remove(imageUuid: string, bucketRoot = 'assets'): Promise<void> {\n    const listParams = {\n      Bucket: process.env.AWS_S3_BUCKET,\n      Prefix: `${bucketRoot}/images/${this.prefix}/${imageUuid}`\n    };\n\n    const listedObjects = await s3.listObjectsV2(listParams).promise();\n\n    if (listedObjects.Contents.length === 0) {\n      return;\n    }\n\n    const deleteParams = {\n      Bucket: process.env.AWS_S3_BUCKET,\n      Delete: { Objects: [] }\n    };\n\n    listedObjects.Contents.forEach(({ Key }) => {\n      deleteParams.Delete.Objects.push({ Key });\n    });\n\n    await s3.deleteObjects(deleteParams).promise();\n\n    if (listedObjects.IsTruncated) {\n      await this.remove(imageUuid);\n    }\n  }\n}\n"]}]}