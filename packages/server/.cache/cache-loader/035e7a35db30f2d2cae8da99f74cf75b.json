{"remainingRequest":"/Users/ykova/mine/coding-kitchen/node_modules/ts-loader/index.js??ref--16-1!/Users/ykova/mine/coding-kitchen/packages/server/src/server.ts","dependencies":[{"path":"/Users/ykova/mine/coding-kitchen/packages/server/src/server.ts","mtime":1637771795821},{"path":"/Users/ykova/mine/coding-kitchen/node_modules/cache-loader/dist/cjs.js","mtime":1637425226491},{"path":"/Users/ykova/mine/coding-kitchen/node_modules/ts-loader/index.js","mtime":1637425227303}],"contextDependencies":[],"result":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { ApolloServer, AuthenticationError } from 'apollo-server-express';\nimport * as cors from 'cors';\nimport { config } from 'dotenv';\nimport * as express from 'express';\nimport { execute, subscribe } from 'graphql';\nimport { graphqlUploadExpress } from 'graphql-upload';\nimport { createServer } from 'http';\nimport Redis from 'ioredis';\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\nimport { WHITELISTED_QUERIES } from './common/whitelistedQuery';\nimport connect from './db/mongoose.client';\nimport schema from './schema';\nconfig();\nfunction tradeTokenForUser(token) {\n    return __awaiter(this, void 0, void 0, function () {\n        var userObj, _a, _b;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    _b = (_a = JSON).parse;\n                    return [4, redis.get(token)];\n                case 1:\n                    userObj = _b.apply(_a, [_c.sent()]);\n                    return [2, userObj ? userObj : null];\n            }\n        });\n    });\n}\nexport var redis = new Redis({ host: process.env.REDIS_HOST });\nexport default (function (port) { return __awaiter(void 0, void 0, Promise, function () {\n    var app, server, apolloServer, db;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                app = express();\n                server = createServer(app);\n                app.use('*', cors({ origin: 'http://localhost:3000' }));\n                apolloServer = new ApolloServer({\n                    schema: schema,\n                    introspection: true,\n                    context: function (_a) {\n                        var req = _a.req;\n                        return __awaiter(void 0, void 0, void 0, function () {\n                            var authToken, currentUser, e_1;\n                            return __generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0:\n                                        if (WHITELISTED_QUERIES.includes(req.body.operationName)) {\n                                            return [2, __assign(__assign({}, req), { redis: redis })];\n                                        }\n                                        authToken = null;\n                                        currentUser = null;\n                                        _b.label = 1;\n                                    case 1:\n                                        _b.trys.push([1, 3, , 4]);\n                                        authToken = req.headers.authorization || '';\n                                        return [4, tradeTokenForUser(authToken)];\n                                    case 2:\n                                        currentUser = _b.sent();\n                                        return [3, 4];\n                                    case 3:\n                                        e_1 = _b.sent();\n                                        console.warn(\"Unable to authenticate using auth token: \".concat(authToken));\n                                        return [3, 4];\n                                    case 4:\n                                        if (!currentUser) {\n                                            throw new AuthenticationError('you must be logged in');\n                                        }\n                                        return [2, __assign(__assign({}, req), { authToken: authToken, currentUser: currentUser, redis: redis })];\n                                }\n                            });\n                        });\n                    }\n                });\n                return [4, apolloServer.start()];\n            case 1:\n                _a.sent();\n                app.use(graphqlUploadExpress({ maxFileSize: 1000000000, maxFiles: 10 }));\n                apolloServer.applyMiddleware({ app: app, path: '/graphql' });\n                db = process.env.MONGODB_URI;\n                connect({ db: db });\n                return [2, new Promise(function (resolve) {\n                        server.listen(port, function () {\n                            new SubscriptionServer({\n                                execute: execute,\n                                schema: schema,\n                                subscribe: subscribe\n                            }, {\n                                path: '/subscriptions',\n                                server: server\n                            });\n                            resolve(server);\n                        });\n                    })];\n        }\n    });\n}); });\n",{"version":3,"file":"/Users/ykova/mine/coding-kitchen/packages/server/src/server.ts","sourceRoot":"","sources":["/Users/ykova/mine/coding-kitchen/packages/server/src/server.ts"],"names":[],"mappings":"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","sourcesContent":["import { ApolloServer, AuthenticationError } from 'apollo-server-express';\nimport * as cors from 'cors';\nimport { config } from 'dotenv';\nimport * as express from 'express';\nimport { execute, subscribe } from 'graphql';\nimport { graphqlUploadExpress } from 'graphql-upload';\nimport { createServer, Server } from 'http';\nimport Redis from 'ioredis';\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\nimport { WHITELISTED_QUERIES } from './common/whitelistedQuery';\nimport connect from './db/mongoose.client';\nimport schema from './schema';\n\nconfig();\n\nasync function tradeTokenForUser(token: string) {\n  const userObj = JSON.parse(await redis.get(token));\n  return userObj ? userObj : null;\n}\n\nexport const redis = new Redis({ host: process.env.REDIS_HOST });\n\nexport default async (port: number): Promise<Server> => {\n  const app = express();\n\n  const server: Server = createServer(app);\n\n  app.use('*', cors({ origin: 'http://localhost:3000' }));\n\n  const apolloServer = new ApolloServer({\n    schema,\n    introspection: true,\n    context: async ({ req }) => {\n      if (WHITELISTED_QUERIES.includes(req.body.operationName)) {\n        return {\n          ...req,\n          redis\n        };\n      }\n\n      let authToken = null;\n      let currentUser = null;\n      try {\n        authToken = req.headers.authorization || '';\n        currentUser = await tradeTokenForUser(authToken);\n      } catch (e) {\n        console.warn(`Unable to authenticate using auth token: ${authToken}`);\n      }\n\n      if (!currentUser) {\n        throw new AuthenticationError('you must be logged in');\n      }\n\n      return {\n        ...req,\n        authToken,\n        currentUser,\n        redis\n      };\n    }\n  });\n\n  await apolloServer.start();\n\n  app.use(graphqlUploadExpress({ maxFileSize: 1000000000, maxFiles: 10 }));\n\n  apolloServer.applyMiddleware({ app, path: '/graphql' });\n\n  const db = process.env.MONGODB_URI;\n  connect({ db });\n\n  return new Promise<Server>(resolve => {\n    server.listen(port, () => {\n      // tslint:disable-next-line\n      new SubscriptionServer(\n        {\n          execute,\n          schema,\n          subscribe\n        },\n        {\n          path: '/subscriptions',\n          server\n        }\n      );\n      resolve(server);\n    });\n  });\n};\n"]}]}